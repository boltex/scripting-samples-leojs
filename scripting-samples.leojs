{
  "leoHeader": {
    "fileFormat": 2
  },
  "vnodes": [
    {
      "gnx": "fil.20240311225244.1",
      "vh": "Introduction"
    },
    {
      "gnx": "felix.20240210225359.1",
      "vh": "sample scripts",
      "children": [
        {
          "gnx": "felix.20240520192649.1",
          "vh": "test"
        },
        {
          "gnx": "felix.20240210225227.1",
          "vh": "@button script-basic-ui"
        },
        {
          "gnx": "felix.20240428020712.1",
          "vh": "@button write-file"
        },
        {
          "gnx": "felix.20240428200310.1",
          "vh": "@button run-command"
        },
        {
          "gnx": "felix.20240428200240.1",
          "vh": "@button run-external-bin"
        },
        {
          "gnx": "felix.20240211230803.1",
          "vh": "@button webview-from-files"
        },
        {
          "gnx": "felix.20240220222639.1",
          "vh": "@button reload-webview"
        },
        {
          "gnx": "felix.20240217151710.1",
          "vh": "@button send-to-webview"
        },
        {
          "gnx": "felix.20240211185932.1",
          "vh": "@button output-panel"
        },
        {
          "gnx": "felix.20240218160650.1",
          "vh": "@button send-to-output"
        },
        {
          "gnx": "felix.20240218160703.1",
          "vh": "@button show-virtualdoc"
        },
        {
          "gnx": "felix.20240218160712.1",
          "vh": "@button change-virtualdoc"
        },
        {
          "gnx": "felix.20240220230120.1",
          "vh": "@button virtualdoc-markdown"
        },
        {
          "gnx": "felix.20240225203334.1",
          "vh": "@button status-bar-item"
        },
        {
          "gnx": "felix.20240225220646.1",
          "vh": "@button status-bar-toggle"
        }
      ]
    },
    {
      "gnx": "felix.20240311000501.1",
      "vh": "webview files",
      "children": [
        {
          "gnx": "felix.20240211213725.1",
          "vh": "@clean web/index.html"
        },
        {
          "gnx": "felix.20240211205013.1",
          "vh": "@clean web/main.js"
        },
        {
          "gnx": "felix.20240211205021.1",
          "vh": "@clean web/style.css"
        },
        {
          "gnx": "felix.20240220223257.1",
          "vh": "@clean images/drawing.svg"
        }
      ]
    },
    {
      "gnx": "fil.20240311222446.1",
      "vh": "@clean README.md"
    }
  ],
  "tnodes": {
    "fil.20240311225244.1": "Scripting Samples\n=================\n\nThe 'sample script' node contains examples of VSCode UI interactions through its API.\n\nUse Ctrl+B to run any of them. Since they are @button nodes, they are also accessible in the BUTTONS pane for direct interaction.\n\n\nSimple Interaction\n==================\n\nThe 'script-basic-ui' node show how to get text input from the user in a dialog box, how to output it back in a simple information window, and also, how to make an HTTP call to an online API and show it's response in the Log Pane.\n\nunl:gnx://scripting-samples.leojs#felix.20240210225227.1\n\n\nWebview with sources from files\n===============================\n\nhttps://code.visualstudio.com/api/extension-guides/webview\n\nThe 'webview-from-files' node unl:gnx://scripting-samples.leojs#felix.20240211230803.1 shows how to create an interactive webview that has:\n - its source html, css, and other files from the workspace itself\n - images from the web \n - images from the local workspace\n - a form with interactive controls and buttons accessible from script\n\n See the nodes below for how to to reload the webview:\n unl:gnx://scripting-samples.leojs#felix.20240220222639.1\n\n and for sending data to the webview's form controls:\n unl:gnx://scripting-samples.leojs#felix.20240217151710.1\n\n\nOutput Panel\n============\n\nThe 'output-panel' and 'send-to-output' nodes show how to create an output panel, similar to the 'Leo Log Pane':\nunl:gnx://scripting-samples.leojs#felix.20240211185932.1\nunl:gnx://scripting-samples.leojs#felix.20240218160650.1\n\n\nVirtual Document\n================\n\nThe 'show-virtualdoc' and 'change-virtualdoc' nodes show how to create and display a virtual read-only document, and how to change its content:\nunl:gnx://scripting-samples.leojs#felix.20240218160703.1\nunl:gnx://scripting-samples.leojs#felix.20240218160712.1\n\nThe node 'virtualdoc-markdown' shows how to preview the render of a virtual document containing markdown.\nunl:gnx://scripting-samples.leojs#felix.20240220230120.1\n\n\nCustom Commands & Status Bar Buttons\n====================================\n\nSee the 'status-bar-item' and 'status-bar-toggle' below for how to create, show and hide a status bar button along with how to create custom commands make markdown content for its tooltip callout. (With clickable commands)\n",
    "felix.20240210225359.1": "@language javascript\n@nowrap\n",
    "felix.20240520192649.1": "g.es('hi')\n\nif(g.isBrowser){\n    g.es('Running in browser: no terminal!');\n}\n\nconst filePath = path.dirname(c.fileName())\n\nconst dirNameUri = vscode.Uri.from({\n    scheme: g.isBrowser?g.workspaceUri.scheme:g.extensionUri.scheme,\n    path: path.dirname(c.fileName())\n});\n\nconst uri1 = g.workspaceUri;\nconst uri2 = dirNameUri;\n\nconst areEqual = uri1.scheme === uri2.scheme &&\n                 uri1.authority === uri2.authority &&\n                 uri1.path === uri2.path &&\n                 uri1.query === uri2.query &&\n                 uri1.fragment === uri2.fragment;\n\ng.es(\"Are URI components equal2? \" + areEqual);\n",
    "felix.20240210225227.1": "/**\n * Basic scripting example (UI input, output, and HTTP fetch call)\n *\n * This uses vscode's U.I. to ask for some text input, to be printed in an info message window.\n * Finally, it also makes a http call to a sample API and prints its result in the log pane.\n */\nconst userInput = await vscode.window.showInputBox({\n    placeHolder: 'Type here', // Placeholder text in the input box\n    prompt: 'Enter text to be written output message:', // Prompt message above the input box\n});\n\nif (!userInput) {\n    vscode.window.showInformationMessage('User canceled the input.');\n} else {\n    vscode.window.showInformationMessage('User input was: ' + userInput);\n}\n\ntry {\n    const apiUrl = 'https://jsonplaceholder.typicode.com/todos/1';\n    const response = await fetch(apiUrl);\n    if (!response.ok) {\n        throw new Error('Network response was not ok!');\n    }\n    const data = await response.json();\n    g.es(\"Got JSON from online API\", JSON.stringify(data));\n} catch (error) {\n    g.es(\"Oh no!\", error.toString());\n}\n",
    "felix.20240428020712.1": "\n// Create a \"text.txt\" file\nconst fileContent = Buffer.from(\"Hello world!\", 'utf-8');\nconst uri = vscode.Uri.joinPath(g.workspaceUri, \"text.txt\");\nawait vscode.workspace.fs.writeFile(uri, fileContent);\n\n\n// Create a binary file with specific bytes\nconst binaryContent = Buffer.from([0x00, 0x01, 0x02, 0x03, 0x04]);\nconst binaryUri = vscode.Uri.joinPath(g.workspaceUri, \"binary.bin\");\nawait vscode.workspace.fs.writeFile(binaryUri, binaryContent);\n\n",
    "felix.20240428200310.1": "\n// Run a command as a child process or exit if running on the web.\nif(g.isBrowser){\n    g.es('Running in browser: no terminal!');\n    return;\n}\n\n// Command to be executed\nconst command = 'echo \"Hello, world!\"';\n\n// Execute the command in a child process\nconst process = child_process.exec(command, (error, stdout, stderr) => {\n    if (error) {\n        g.es(`Execution error: ${error}`);\n        return;\n    }\n    g.es(`Output of child_process.exec: ${stdout}`);\n    if (stderr) {\n        g.es(`Command Error output: ${stderr}`);\n    }\n});\n",
    "felix.20240428200240.1": "// Run a command as a child process or exit if running on the web.\nif(g.isBrowser){\n    g.es('Running in browser: no terminal!');\n    return;\n}\n\n// Run an external file (Launch a child process)\nlet executableFile = g.isWindows?\"helloworld-win.exe\": \"helloworld-elf\";\nconst executableUri = vscode.Uri.joinPath(g.workspaceUri, , \"binaries\", executableFile);\nconst executablePath = executableUri.fsPath;\nlet permission;\n// Make binary executable if on linux\nif(!g.isWindows){\n    permission = new Promise(\n        (resolve, reject)=>{\n            const command = `chmod +x \"${executablePath}\"`;\n            const processPermissions = child_process.exec(command, (error, stdout, stderr) => {\n                if (error) {\n                    g.es(`Execution error: ${error}`);\n                    reject(error);\n                    return;\n                }\n                if (stderr) {\n                    g.es(`Command Error output: ${stderr}`);\n                }\n                resolve();\n            });\n        }\n    );\n}else{\n    permission = Promise.resolve();\n}\n// Leave 100ms for permissions command\npermission.then(\n    ()=>{\n        const process = child_process.exec(`\"${executablePath}\"`, (error, stdout, stderr) => {\n            if (error) {\n                g.es(`Execution error: ${error}`);\n                return;\n            }\n            g.es(`Output of child_process.exec: ${stdout}`);\n            if (stderr) {\n                g.es(`Execution Error output: ${stderr}`);\n            }\n        });\n    }\n);",
    "felix.20240211230803.1": "/**\n * Script example that creates a webview instance (from file sources) and\n * stores a reference to it as g.panel for further reference.\n *\n * This webview contains interactive form controls. \n *\n * This uses the g.workspaceUri constant as the base URI, to access files\n * in the workspace as various sources for the webview's content.\n */\nif(g.panel){\n    g.es(\"Already exists, so just reveal it!\")\n    g.panel.reveal();\n}else{\n    g.panel = vscode.window.createWebviewPanel(\n        'myWebview',\n        'LeoJS Test Webview',\n        2,\n        { \n            enableScripts:true \n            retainContextWhenHidden: false,\n            enableFindWidget: true,\n            enableCommandUris: true,\n        }\n      );\n    g.extensionContext.subscriptions.push(g.panel);      \n    g.panel.onDidDispose(\n        () => {\n            g.es('disposed of webview');\n            g.panel = undefined;\n        },\n        null,\n        g.extensionContext.subscriptions\n    );\n\n    // Get the html file content and replace the three strings :\n    // the 'nonce' string, the base url, and 'cspSource', the Content security policy source.\n    const fileUri = vscode.Uri.joinPath(g.workspaceUri, 'web', 'index.html');\n    const htmlDoc = await vscode.workspace.openTextDocument(fileUri);\n    const nonce = Array.from({ length: 32 }, () => Math.random().toString(36).charAt(2)).join('');\n    const baseUri = g.panel.webview.asWebviewUri(g.workspaceUri);\n    const html = htmlDoc.getText().replace(\n                            /#{nonce}/g,\n                            nonce\n                        ).replace(\n                            /#{root}/g,\n                            `${baseUri}`\n                        ).replace(\n                            /#{cspSource}/g,\n                            `${g.panel.webview.cspSource}`\n                        );\n\n    // Icon URI for the webview's tab is directly in vscode's DOM, so has to be 'data'.\n    const iconUri = vscode.Uri.joinPath(g.workspaceUri, 'images', 'descartes.png');\n    const iconData = await vscode.workspace.fs.readFile(iconUri);\n    const iconDataUri = vscode.Uri.parse(\n         `data:image/png;base64,${Buffer.from(iconData).toString('base64')}`\n     );\n\n    // Fill in the tab's icon and the actual HTML content of the webview\n    g.panel.iconPath = iconDataUri;\n    g.panel.webview.html = html;\n    \n    // Listen for events from the webview\n    g.panel.webview.onDidReceiveMessage(\n        message => {\n            switch (message.fromMyWebview) {\n                case 'myWebviewMessage':\n                    void vscode.window.showInformationMessage(\"Webview loaded succesfully!\");\n                    break;\n                case 'myButtonPressed':\n                    const values = message.data;\n                    if(values){\n                        g.es('Got data from webview:')\n                        g.es(` select:${values.select}\\n input:${values.input}\\n checkbox1:${values.checkbox1} checkbox2:${values.checkbox2}\\n radio:${values.radio} `)\n                    }\n                    break;\n                default:\n                    console.log('Received unknown webview message!');           \n            }\n        }\n    );\n}\n",
    "felix.20240220222639.1": "/**\n * This will reload the webview created from files, with refreshed content \n * from the files.\n */\nif(!g.panel){\n    g.es(\"Webview not yet created!\")\n}else{\n    const fileUri = vscode.Uri.joinPath(g.workspaceUri, 'web', 'index.html');\n    const htmlDoc = await vscode.workspace.openTextDocument(fileUri);\n    const nonce = Array.from({ length: 32 }, () => Math.random().toString(36).charAt(2)).join('');\n    const baseUri = g.panel.webview.asWebviewUri(g.workspaceUri);\n    const html = htmlDoc.getText().replace(\n                            /#{nonce}/g,\n                            nonce\n                        ).replace(\n                            /#{root}/g,\n                            `${baseUri}`\n                        ).replace(\n                            /#{cspSource}/g,\n                            `${g.panel.webview.cspSource}`\n                        );\n\n    g.panel.webview.html = html;\n    g.panel.reveal();\n}",
    "felix.20240217151710.1": "/**\n * This script shows how to send data to the webview by\n * changing values of the form's controls.\n */\nif(g.panel){\n    const package = {\n        select: 'B',\n        input: c.p.h,\n        checkbox1: false,\n        checkbox2: true,\n        radio: '2'\n    }\n    await g.panel.webview.postMessage(\n        { \n            \"toMyWebview\": \"sendEvent\",\n            \"package\": package\n        }\n    );\n}else{\n    g.es(\"Webview not yet created!\");\n}\n",
    "felix.20240211185932.1": "/**\n * This script shows how to create a new output channel.\n * It stores the created instance on 'g' for further reference.\n * (See the 'send-to-output' script below to view how to output content)\n */\nif(g.outputPanel){\n    g.es(\"Already exists, so just reveal it!\")\n    g.outputPanel.show();\n}else{\n    g.outputPanel = vscode.window.createOutputChannel(\"My Output Panel\");\n    g.extensionContext.subscriptions.push(g.outputPanel);      \n    g.outputPanel.show();\n}\n",
    "felix.20240218160650.1": "/**\n * This script shows how to output some content into an output panel.\n */\nif(g.outputPanel){\n    g.outputPanel.appendLine(\"Current node's headline: \" + c.p.h);\n    g.outputPanel.show();\n}else{\n    g.es(\"Output panel not yet created!\");\n}",
    "felix.20240218160703.1": "/**\n * This script shows how to create a virtual (read-only) document\n * (See the 'change-virtualdoc' script below to view how to change its content)\n */\nif(g.virtualDoc){\n    g.es(\"Already exists, so just reveal it!\")\n}else{\n    g.virtualDocProvider = new (class {\n        constructor() {\n            this.timesChanged = 0;\n            this.onDidChangeEmitter = new vscode.EventEmitter<vscode.Uri>();\n            this.onDidChange = this.onDidChangeEmitter.event;\n        }\n        provideTextDocumentContent(uri) {\n            return g.dedent(`\\\n            Headline Info\n            =============\n\n            Current headline is **${c.p.h}**\n\n            _This was refreshed ${this.timesChanged} times._\n            `); \n        }\n        update(uri) {\n            this.timesChanged+=1;\n            this.onDidChangeEmitter.fire(uri);\n        }\n    })();\n    g.virtualDoc = vscode.workspace.registerTextDocumentContentProvider('myScheme', g.virtualDocProvider);\n    g.extensionContext.subscriptions.push(g.virtualDoc);      \n}\n// Reveal it\nconst uri = vscode.Uri.parse('myScheme:' + 'myFilename');\nconst doc = await vscode.workspace.openTextDocument(uri);\nawait vscode.window.showTextDocument(doc, { preview: false, viewColumn: 2 });\n",
    "felix.20240218160712.1": "/**\n * This script shows how to change the content of a virtual document.\n */\nif(g.virtualDoc && g.virtualDocProvider){\n    const uri = vscode.Uri.parse('myScheme:' + 'myFilename');\n    g.virtualDocProvider.update(uri);\n}else{\n    g.es(\"virtual Document not yet created!\");\n}",
    "felix.20240220230120.1": "/**\n * This script shows how to use VSCode's command to open a live preview \n * for markdown content. (in this case, a virtual document)\n */\nif(g.virtualDoc && g.virtualDocProvider){\n    const uri = vscode.Uri.parse('myScheme:' + 'myFilename');\n    void vscode.commands.executeCommand('markdown.showPreviewToSide', uri);\n}else{\n    g.es(\"virtual Document not yet created!\");\n}",
    "felix.20240225203334.1": "/**\n * This script shows how to create custom commands\n * and how to add them to a status bar item click event response,\n * and, as buttons in markdown links for its tooltip content.\n *\n * It stores the button and commands instances on 'g' as g.customCommand1,\n * g.customCommand2 and g.statusBarItem.\n */\nif(g.customCommand1){\n    g.es('customCommand1 already created');\n}else{\n    g.customCommand1 = vscode.commands.registerCommand(\n            'leojs.myCommand1',\n            ()=>{vscode.window.showInformationMessage(\"Custom Command 1 Called!\");}\n        );\n    g.extensionContext.subscriptions.push(g.customCommand1); // Disposable \n}\nif(g.customCommand2){\n    g.es('customCommand2 already created');\n}else{\n    g.customCommand2 = vscode.commands.registerCommand(\n            'leojs.myCommand2',\n            ()=>{vscode.window.showInformationMessage(\"Custom Command 2 Called!\");}\n        );\n    g.extensionContext.subscriptions.push(g.customCommand1); // Disposable \n}\n\nif(g.statusBarItem){\n    g.es('statusBarItem already created');\n}else{\n    g.statusBarItem = vscode.window.createStatusBarItem(vscode.StatusBarAlignment.Left, 0);\n    g.extensionContext.subscriptions.push(g.statusBarItem); // Disposable \n\n    g.statusBarItem.text = \"$(star) Custom Item\";\n    g.statusBarItem.color = \"fb7c47\";\n    g.statusBarItem.command = \"leojs.myCommand1\"; // Command1 when clicking item itself.\n\n    const tooltip = new vscode.MarkdownString(); // Command2 when using link in tooltip.\n    tooltip.value = g.dedent(`\\\n        ## Custom Tooltip\n\n        Click status bar item to activate Command 1.\n\n        ---\n\n        _Or click here to activate_ **[Command 2](command:leojs.myCommand2)**\n\n    `);\n    tooltip.isTrusted = true;\n    tooltip.supportThemeIcons = true;\n    g.statusBarItem.tooltip = tooltip;\n    g.statusBarItem.show();\n}\n\n",
    "felix.20240225220646.1": "/**\n * This script shows how to toggle the visibility of a status bar item.\n */\nif(!g.statusBarItem){\n    g.es('g.statusBarItem not yet created!');\n    return;\n}\nif(g.statusBarItemHidden){\n    g.statusBarItem.show();\n    g.statusBarItemHidden = false;\n}else{\n    g.statusBarItemHidden = true; // Store state as statusBarItemHidden on 'g'.\n    g.statusBarItem.hide();\n}",
    "felix.20240211213725.1": "<!DOCTYPE html>\n<html lang=\"en\" tabindex=\"-1\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta http-equiv=\"Content-Security-Policy\"\n    content=\"default-src 'none'; style-src #{cspSource}; img-src #{cspSource} https:; script-src 'nonce-#{nonce}';\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <link href=\"#{root}/web/style.css\" rel=\"stylesheet\" />\n  <title>My Webview</title>\n</head>\n\n<body>\n  <p><span class=\"big\">&#8593;</span> Tab icon from workspace<br><em class=\"muted\">&lt;root&gt;/images/descartes.png</em></p>\n  <p>Image from the web<br><em class=\"muted\">https://boltex.github.io/leoapp128px.png</em></p>\n  <img src=\"https://boltex.github.io/leoapp128px.png\" />\n  <p>Image from workspace<br><em class=\"muted\">&lt;root&gt;/images/descartes.png</em></p>\n  <img src=\"#{root}/images/descartes.png\" />\n  <br>\n  <p>SVG from workspace<br><em class=\"muted\">&lt;root&gt;/images/drawing.svg</em></p>\n  <img src=\"#{root}/images/drawing.svg\" />\n  <br>\n\n  <p>\n    Some paragraph of text.\n    <a href=\"https://github.com/boltex/leojs\">Here's a link</a>\n    and some sample form controls below.\n  </p>\n    <p>\n    Send its data to LeoJS with the button,<br> or use the 'send-to-webview' <strong>@button</strong> to fill it with data from LeoJS. \n  </p>\n\n  <div class=\"row\">\n    <label for=\"mySelect\">My Dropdown:</label>\n    <select name=\"mySelect\" id=\"mySelect\" title=\"Some dropdown\">\n      <option value=\"A\">Choice A</option>\n      <option value=\"B\">Choice B</option>\n      <option value=\"C\">Choice C</option>\n      <option value=\"D\">Choice D</option>\n    </select>\n  </div>\n  <div class=\"row\">\n    <label for=\"myInput\">My input:</label>\n    <input title=\"Some input\" type=\"text\" id=\"myInput\" name=\"myInput\" placeholder=\"Type some text\">\n  </div>\n  <div class=\"row\">\n    <input type=\"checkbox\" id=\"myCheckbox1\" name=\"myCheckbox1\">\n    <label for=\"myCheckbox1\" title=\"Some checkbox\">Checkbox 1</label>\n    <input type=\"checkbox\" id=\"myCheckbox2\" name=\"myCheckbox2\">\n    <label for=\"myCheckbox2\" title=\"Some checkbox\">Checkbox 2</label>\n  </div>\n  <div class=\"row\">\n    <input type=\"radio\" id=\"myRadio1\" name=\"myRadioScope\" checked value=\"1\">\n    <label title=\"Some radio button\" for=\"myRadio1\">Radio 1</label>\n    <input type=\"radio\" id=\"myRadio2\" name=\"myRadioScope\" value=\"2\">\n    <label title=\"Some radio button\" for=\"myRadio2\">Radio 2</label>\n  </div>\n\n  <button type=\"button\" id=\"myButton\">Send to LeoJS</button>\n\n  <!-- end of body -->\n  <script nonce=\"#{nonce}\" src=\"#{root}/web/main.js\"></script>\n</body>\n\n</html>\n",
    "felix.20240211205013.1": "@language javascript\n(function () {\n\n    const vscode = acquireVsCodeApi();\n\n    window.addEventListener('message', (event) => {\n        const message = event.data; // The json data\n        switch (message.toMyWebview) {\n            case 'hello':\n                console.log('Webview Got Hello');\n                break;\n            case 'hi':\n                console.log('Webview Got hi');\n                break;\n            case 'sendEvent':\n                receivedData(message.package);\n                break;\n            default:\n                console.log('Webview got some message');\n        }\n    });\n\n    vscode.postMessage({ fromMyWebview: 'myWebviewMessage' });\n\n    // Setup button click action\n    const myButton = document.getElementById(\"myButton\");\n    if (myButton) {\n        myButton.addEventListener(\"click\", sendData);\n    }\n\n    function sendData() {\n        const selectEl = document.getElementById(\"mySelect\");\n        const inputEl = document.getElementById(\"myInput\");\n        const checkbox1El = document.getElementById(\"myCheckbox1\");\n        const checkbox2El = document.getElementById(\"myCheckbox2\");\n        const radioEl = document.querySelector('input[name=\"myRadioScope\"]:checked');\n        const formValues = {\n            select: selectEl ? selectEl.value : undefined,\n            input: inputEl ? inputEl.value : undefined,\n            checkbox1: checkbox1El ? checkbox1El.checked : undefined,\n            checkbox2: checkbox2El ? checkbox2El.checked : undefined,\n            radio: radioEl ? radioEl.value : undefined,\n        };\n        vscode.postMessage(\n            {\n                fromMyWebview: 'myButtonPressed',\n                data: formValues\n            }\n        );\n    }\n\n    function receivedData(data) {\n        const selectEl = document.getElementById(\"mySelect\");\n        const inputEl = document.getElementById(\"myInput\");\n        const checkbox1El = document.getElementById(\"myCheckbox1\");\n        const checkbox2El = document.getElementById(\"myCheckbox2\");\n        const radioEl = document.querySelector(`input[name=\"myRadioScope\"][value=\"${data.radio}\"]`);\n        if (selectEl) selectEl.value = data.select;\n        if (inputEl) inputEl.value = data.input;\n        if (checkbox1El) checkbox1El.checked = data.checkbox1;\n        if (checkbox2El) checkbox2El.checked = data.checkbox2;\n        if (radioEl) radioEl.checked = true;\n    }\n\n})();\n",
    "felix.20240211205021.1": "@language css\nhtml {\n  box-sizing: border-box;\n  font-size: 13px;\n  --input-padding-vertical: 6px;\n  --input-padding-horizontal: 4px;\n  --input-margin-vertical: 4px;\n  --input-margin-horizontal: 0;\n  height: 100%;\n}\n\n*:focus {\n  outline-color: var(--vscode-focusBorder);\n}\n\na {\n  color: var(--vscode-textLink-foreground);\n}\n\na:hover,\na:active {\n  color: var(--vscode-textLink-activeForeground);\n}\n\ncode {\n  font-size: var(--vscode-editor-font-size);\n  font-family: var(--vscode-editor-font-family);\n}\n\nbutton {\n  border: 1px solid var(--vscode-button-border,transparent);\n  padding: var(--input-padding-vertical) var(--input-padding-horizontal);\n  border-radius: 2px;\n  width: 100%;\n  max-width: 300px;\n  text-align: center;\n  outline: 1px solid transparent;\n  outline-offset: 2px !important;\n  color: var(--vscode-button-foreground);\n  background: var(--vscode-button-background);\n}\n\nbutton:hover {\n  cursor: pointer;\n  background: var(--vscode-button-hoverBackground);\n}\n\nbutton:focus {\n  outline-color: var(--vscode-focusBorder);\n}\n\nbutton.secondary {\n  color: var(--vscode-button-secondaryForeground);\n  background: var(--vscode-button-secondaryBackground);\n}\n\nbutton.secondary:hover {\n  background: var(--vscode-button-secondaryHoverBackground);\n}\n\nlabel {\n  display: inline-block;\n  margin-bottom: 0.2em;\n}\n\nselect {\n  background: var(--vscode-dropdown-background);\n  color: var(--vscode-input-foreground);\n  border-color: var(--vscode-dropdown-border);\n  cursor: pointer;\n  position: relative;\n  border-radius: 2px;\n  padding: 3px var(--input-padding-horizontal);\n  color: var(--vscode-input-foreground);\n}\n\nselect:focus {\n  outline-color: var(--vscode-input-border);\n}\n\nselect:disabled {\n  opacity: 0.5;\n  cursor: default;\n}\n\nselect option {\n  background-color: var(--vscode-dropdown-listBackground);\n  padding: 3px var(--input-padding-horizontal);\n}\n\nselect option:focus {\n  background-color: var(--vscode-input-background);\n  outline-color: var(--vscode-input-border);\n}\n\ninput:not([type=\"radio\"]):not([type=\"checkbox\"]),\ntextarea {\n  margin-right: 20px;\n  border: none;\n  font-family: var(--vscode-font-family);\n  padding: 3px var(--input-padding-horizontal);\n  border-radius: 2px;\n  color: var(--vscode-input-foreground);\n  outline-color: var(--vscode-input-border);\n  background-color: var(--vscode-input-background);\n}\n\ntextarea {\n  width: 100%;\n  display: block;\n}\n\ninput[type=\"checkbox\"],\ninput[type=\"radio\"] {\n  cursor: pointer;\n}\n\ninput:disabled {\n  opacity: 0.5;\n  cursor: default;\n}\n\ninput::placeholder,\ntextarea::placeholder {\n  color: var(--vscode-input-placeholderForeground);\n}\n\nu {\n  color: var(--vscode-editor-foreground);\n  text-decoration-color: var(--vscode-foreground);\n  text-underline-offset: 0.04em;\n}\n\n.row {\n  margin-bottom: 0.5em;\n}\n\n.muted {\n  opacity: 0.6;\n}\n\n.big {\n  font-size: 20px;\n}",
    "felix.20240220223257.1": "@language xml\n<svg width=\"100\" height=\"100\" xmlns=\"http://www.w3.org/2000/svg\">\n  <circle cx=\"50\" cy=\"50\" r=\"40\" stroke=\"blue\" stroke-width=\"5\" fill=\"lightgray\" />\n  <line x1=\"10\" y1=\"10\" x2=\"90\" y2=\"90\" style=\"stroke:red;stroke-width:5\" />\n</svg>\n",
    "fil.20240311222446.1": "# ![LeoEditor](https://raw.githubusercontent.com/boltex/leojs/master/resources/leoapp.png) Scripting Samples for LeoJS\n\n> *For an extension sample that interacts with LeoJS, see [extension-samples-leojs](https://github.com/boltex/extension-samples-leojs)*\n\n[LeoJS](https://github.com/boltex/leojs?tab=readme-ov-file#-literate-editor-with-outline) can run Leo scripts in both JavaScript or TypeScript, instead of Python.\n\nThree predefined symbols, c, g, and p give Leo scripts easy access to all the data in the outline. These symbols also allow Leo scripts to execute any code in Leo’s own codebase. The g symbols also contains references to useful objects, such as the VSCode API, to handle interactions with the UI, other extensions, or anything else in the IDE.\n\n## This repository contains a Leo file which demonstrates various ways to use the VSCode API and interact with its UI.\n\n[Install the LeoJS extension](https://code.visualstudio.com/docs/editor/extension-marketplace#_browse-for-extensions), right-click on the **scripting-sample.leojs** file in the explorer to open it with LeoJS, and see the **Introduction** node for more details on each sample script.\n\nDon't hesitate to ask questions, file issues, or make comments and suggestions on [the project's issue page](https://github.com/boltex/leojs/issues).\n"
  }
}